name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Configure testcontainers
        run: |
          mkdir -p member/src/test/resources mysub-infra/src/test/resources recommend/src/test/resources
          echo 'docker.client.strategy=org.testcontainers.dockerclient.UnixSocketClientProviderStrategy
          docker.host=unix:///var/run/docker.sock
          ryuk.container.privileged=true
          testcontainers.reuse.enable=true' > member/src/test/resources/testcontainers.properties
          cp member/src/test/resources/testcontainers.properties mysub-infra/src/test/resources/testcontainers.properties
          cp member/src/test/resources/testcontainers.properties recommend/src/test/resources/testcontainers.properties

      - name: Build services
        run: |
          chmod +x gradlew
          ./gradlew :member:build :mysub-infra:build :recommend:build -x test

      - name: Run tests and SonarQube analysis - member
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          ./gradlew :member:test :member:jacocoTestReport :member:sonar \
            -Dsonar.projectKey=lifesub-member-${{ vars.TEAM_ID || 'team' }} \
            -Dsonar.projectName=lifesub-member-${{ vars.TEAM_ID || 'team' }} \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**

      - name: Run tests and SonarQube analysis - mysub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          ./gradlew :mysub-infra:test :mysub-infra:jacocoTestReport :mysub-infra:sonar \
            -Dsonar.projectKey=lifesub-mysub-${{ vars.TEAM_ID || 'team' }} \
            -Dsonar.projectName=lifesub-mysub-${{ vars.TEAM_ID || 'team' }} \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**

      - name: Run tests and SonarQube analysis - recommend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          ./gradlew :recommend:test :recommend:jacocoTestReport :recommend:sonar \
            -Dsonar.projectKey=lifesub-recommend-${{ vars.TEAM_ID || 'team' }} \
            -Dsonar.projectName=lifesub-recommend-${{ vars.TEAM_ID || 'team' }} \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-builds
          path: |
            member/build/libs/*.jar
            mysub-infra/build/libs/*.jar
            recommend/build/libs/*.jar

  release:
    name: Build & Push Images
    needs: build
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_image_tag.outputs.image_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load environment variables
        run: |
          if [ -f "deployment/deploy_env_vars" ]; then
            while IFS= read -r line; do
              # Skip comment lines and empty lines
              [[ "$line" =~ ^#.*$ || -z "$line" ]] && continue
              # Extract the variable name and value
              if [[ "$line" =~ ^([^=]+)=(.*)$ ]]; then
                echo "${BASH_REMATCH[1]}=${BASH_REMATCH[2]}" >> $GITHUB_ENV
              fi
            done < "deployment/deploy_env_vars"
          
            # Debug: Print all environment variables
            echo "Loaded environment variables:"
            grep -v '^#' deployment/deploy_env_vars | grep -v '^$'
          else
            echo "deploy_env_vars file not found"
            exit 1
          fi

      - name: Set image tag
        id: set_image_tag
        run: |
          IMAGE_TAG=$(date +'%Y%m%d%H%M%S')
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Image tag: $IMAGE_TAG"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-builds

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.registry }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push member image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/container/Dockerfile
          push: true
          tags: ${{ env.registry }}/${{ env.image_org }}/member:${{ steps.set_image_tag.outputs.image_tag }}
          build-args: |
            BUILD_LIB_DIR=member/build/libs
            ARTIFACTORY_FILE=member.jar

      - name: Build and push mysub image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/container/Dockerfile
          push: true
          tags: ${{ env.registry }}/${{ env.image_org }}/mysub:${{ steps.set_image_tag.outputs.image_tag }}
          build-args: |
            BUILD_LIB_DIR=mysub-infra/build/libs
            ARTIFACTORY_FILE=mysub.jar

      - name: Build and push recommend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/container/Dockerfile
          push: true
          tags: ${{ env.registry }}/${{ env.image_org }}/recommend:${{ steps.set_image_tag.outputs.image_tag }}
          build-args: |
            BUILD_LIB_DIR=recommend/build/libs
            ARTIFACTORY_FILE=recommend.jar

  deploy:
    name: Deploy to Kubernetes
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load environment variables
        run: |
          if [ -f "deployment/deploy_env_vars" ]; then
            while IFS= read -r line; do
              # Skip comment lines and empty lines
              [[ "$line" =~ ^#.*$ || -z "$line" ]] && continue
              # Extract the variable name and value
              if [[ "$line" =~ ^([^=]+)=(.*)$ ]]; then
                echo "${BASH_REMATCH[1]}=${BASH_REMATCH[2]}" >> $GITHUB_ENV
              fi
            done < "deployment/deploy_env_vars"
          else
            echo "deploy_env_vars file not found"
            exit 1
          fi

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: rg-digitalgarage-01
          cluster-name: aks-digitalgarage-01

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.namespace }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Install envsubst
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext-base

      - name: Generate manifest from template
        run: |
          # Set the IMAGE_TAG from release job output
          export member_image_path="${{ env.registry }}/${{ env.image_org }}/member:${{ needs.release.outputs.image_tag }}"
          export mysub_image_path="${{ env.registry }}/${{ env.image_org }}/mysub:${{ needs.release.outputs.image_tag }}"
          export recommend_image_path="${{ env.registry }}/${{ env.image_org }}/recommend:${{ needs.release.outputs.image_tag }}"
          
          # Export all environment variables for envsubst
          export namespace="${{ env.namespace }}"
          export allowed_origins="${{ env.allowed_origins }}"
          export jwt_secret_key="${{ env.jwt_secret_key }}"
          export postgres_user="${{ env.postgres_user }}"
          export postgres_password="${{ env.postgres_password }}"
          export replicas="${{ env.replicas }}"
          export resources_requests_cpu="${{ env.resources_requests_cpu }}"
          export resources_requests_memory="${{ env.resources_requests_memory }}"
          export resources_limits_cpu="${{ env.resources_limits_cpu }}"
          export resources_limits_memory="${{ env.resources_limits_memory }}"
          
          # Generate the manifest file
          envsubst < deployment/deploy.yaml.template > deployment/deploy.yaml
          
          # Print the generated manifest for debugging
          echo "=== Generated Kubernetes Manifest ==="
          cat deployment/deploy.yaml
          echo "==================================="

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f deployment/deploy.yaml
          
          echo "Waiting for deployments to be ready..."
          kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/member --timeout=300s
          kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/mysub --timeout=300s
          kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/recommend --timeout=300s
          
          echo "Deployments are ready!"